window.SIDEBAR_ITEMS = {"fn":[["future_into_py","Convert a Rust Future into a Python awaitable with a generic runtime"],["future_into_py_with_locals","Convert a Rust Future into a Python awaitable with a generic runtime"],["get_current_locals","Either copy the task locals from the current task OR get the current running loop and contextvars from Python."],["get_current_loop","Get the current event loop from either Python or Rust async task local context"],["into_future","Convert a Python `awaitable` into a Rust Future"],["into_stream_v1","unstable-streams Convert an async generator into a stream"],["into_stream_v2","unstable-streams Convert an async generator into a stream"],["into_stream_with_locals_v1","unstable-streams Convert an async generator into a stream"],["into_stream_with_locals_v2","unstable-streams Convert an async generator into a stream"],["local_future_into_py","Convert a `!Send` Rust Future into a Python awaitable with a generic runtime"],["local_future_into_py_with_locals","Convert a `!Send` Rust Future into a Python awaitable with a generic runtime and manual specification of task locals."],["run","Run the event loop until the given Future completes"],["run_until_complete","Run the event loop until the given Future completes"]],"trait":[["ContextExt","Exposes the utilities necessary for using task-local data in the Runtime"],["JoinError","Generic utilities for a JoinError"],["LocalContextExt","Adds the ability to scope task-local data for !Send futures"],["Runtime","Generic Rust async/await runtime"],["SpawnLocalExt","Extension trait for async/await runtimes that support spawning local tasks"]]};