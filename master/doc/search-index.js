var searchIndex = JSON.parse('{\
"pyo3_asyncio":{"doc":"Rust Bindings to the Python Asyncio Event Loop","t":[3,0,11,11,11,11,11,11,0,11,11,11,0,5,11,5,11,0,11,0,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,23,0,5,5,5,5,23,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,16,16,8,8,8,5,5,5,5,10,5,5,5,5,5,10,5,5,5,5,10,10,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,5,12,5,11,12,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,23,0,5,5,5,5,23,5,0,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TaskLocals","async_std","borrow","borrow_mut","clone","clone_into","context","copy_context","err","event_loop","fmt","from","generic","get_running_loop","into","into_future_with_locals","new","testing","to_owned","tokio","try_from","try_into","type_id","with_context","with_running_loop","future_into_py","future_into_py_with_locals","get_current_locals","get_current_loop","into_future","into_stream_v1","into_stream_v2","into_stream_with_locals_v1","into_stream_with_locals_v2","local_future_into_py","local_future_into_py_with_locals","main","re_exports","run","run_until_complete","scope","scope_local","test","spawn_blocking","RustPanic","as_ptr","as_ref","borrow","borrow_mut","deref","fmt","fmt","from","from_borrowed_ptr_or_opt","from_owned_ptr_or_opt","into","new_err","source","to_object","to_string","try_from","try_from","try_from_exact","try_from_unchecked","try_into","type_id","type_object","type_object_raw","ContextExt","JoinError","JoinError","JoinHandle","LocalContextExt","Runtime","SpawnLocalExt","future_into_py","future_into_py_with_locals","get_current_locals","get_current_loop","get_task_locals","into_future","into_stream_v1","into_stream_v2","into_stream_with_locals_v1","into_stream_with_locals_v2","is_panic","local_future_into_py","local_future_into_py_with_locals","run","run_until_complete","scope","scope_local","spawn","spawn_local","Args","Test","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","into","into","main","name","parse_args","task","test_fn","test_harness","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","future_into_py","future_into_py_with_locals","get_current_locals","get_current_loop","get_runtime","init","into_future","into_stream_v1","into_stream_v2","into_stream_with_locals_v1","into_stream_with_locals_v2","local_future_into_py","local_future_into_py_with_locals","main","re_exports","run","run_until_complete","scope","scope_local","test","pending","runtime","Builder","EnterGuard","Handle","Runtime","TryCurrentError","block_on","block_on","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","current","drop","enable_all","enable_io","enable_time","enter","enter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handle","into","into","into","into","into","is_missing_context","is_thread_local_destroyed","max_blocking_threads","new","new_current_thread","new_multi_thread","on_thread_park","on_thread_start","on_thread_stop","on_thread_unpark","shutdown_background","shutdown_timeout","spawn","spawn","spawn_blocking","spawn_blocking","thread_keep_alive","thread_name","thread_name_fn","thread_stack_size","to_owned","to_string","try_current","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","worker_threads"],"q":["pyo3_asyncio","","","","","","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::async_std","","","","","","","","","","","","","","","","","","pyo3_asyncio::async_std::re_exports","pyo3_asyncio::err","","","","","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::generic","","","","","","","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::testing","","","","","","","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::tokio","","","","","","","","","","","","","","","","","","","","pyo3_asyncio::tokio::re_exports","","pyo3_asyncio::tokio::re_exports::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Task-local data to store for Python conversions.","async-std-runtime PyO3 Asyncio functions specific to the …","","","","","Get a reference to the python context","Capture the current task’s contextvars","Errors and exceptions related to PyO3 Asyncio","Get a reference to the event loop","","","Generic implementations of PyO3 Asyncio utilities that can …","Get a reference to the Python Event Loop from Rust","","Convert a Python <code>awaitable</code> into a Rust Future","At a minimum, TaskLocals must store the event loop.","testing Utilities for writing PyO3 Asyncio tests","","tokio-runtime PyO3 Asyncio functions specific to the tokio …","","","","Manually provide the contextvars for the current task.","Construct TaskLocals with the event loop returned by …","Convert a Rust Future into a Python awaitable","Convert a Rust Future into a Python awaitable","Either copy the task locals from the current task OR get …","Get the current event loop from either Python or Rust …","Convert a Python <code>awaitable</code> into a Rust Future","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","Convert a <code>!Send</code> Rust Future into a Python awaitable","Convert a <code>!Send</code> Rust Future into a Python awaitable","attributes Provides the boilerplate for the <code>async-std</code> …","attributes re-exports for macros","Run the event loop until the given Future completes","Run the event loop until the given Future completes","Set the task local event loop for the given future","Set the task local event loop for the given !Send future","attributes testing Registers an <code>async-std</code> test with the …","re-export spawn_blocking for use in <code>#[test]</code> macro without …","","Gets the underlying FFI pointer, returns a borrowed …","","","","","","","","","","","Creates a new <code>PyErr</code> of this type.","","","","","","","","","","","","Exposes the utilities necessary for using task-local data …","Generic utilities for a JoinError","The error returned by a JoinHandle after being awaited","A future that completes with the result of the spawned task","Adds the ability to scope task-local data for !Send futures","Generic Rust async/await runtime","Extension trait for async/await runtimes that support …","Convert a Rust Future into a Python awaitable with a …","Convert a Rust Future into a Python awaitable with a …","Either copy the task locals from the current task OR get …","Get the current event loop from either Python or Rust …","Get the task locals for the current task","Convert a Python <code>awaitable</code> into a Rust Future","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","Check if the spawned task exited because of a panic","Convert a <code>!Send</code> Rust Future into a Python awaitable with a …","Convert a <code>!Send</code> Rust Future into a Python awaitable with a …","Run the event loop until the given Future completes","Run the event loop until the given Future completes","Set the task locals for the given future","Set the task locals for the given !Send future","Spawn a future onto this runtime’s event loop","Spawn a !Send future onto this runtime’s event loop","Args that should be provided to the test program","The structure used by the <code>#[test]</code> macros to provide a test …","","","","","","","","","","","","Parses test arguments and passes the tests to the …","The fully qualified name of the test","Parse the test args from the command line","Create the task that runs the test","The function used to create the task that runs the test.","Run a sequence of tests while applying any necessary …","","","","","","","","Convert a Rust Future into a Python awaitable","Convert a Rust Future into a Python awaitable","Either copy the task locals from the current task OR get …","Get the current event loop from either Python or Rust …","Get a reference to the current tokio runtime","Initialize the Tokio runtime with a custom build","Convert a Python <code>awaitable</code> into a Rust Future","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","unstable-streams Convert an async generator into a stream","Convert a <code>!Send</code> Rust Future into a Python awaitable","Convert a <code>!Send</code> Rust Future into a Python awaitable","attributes Enables an async main function that uses the …","attributes re-exports for macros","Run the event loop until the given Future completes","Run the event loop until the given Future completes","Set the task local event loop for the given future","Set the task local event loop for the given !Send future","attributes testing Registers a <code>tokio</code> test with the …","re-export pending to be used in tokio macros without …","re-export tokio::runtime to build runtimes in tokio macros …","Builds Tokio Runtime with custom configuration values.","Runtime context guard.","Handle to the runtime.","The Tokio runtime.","Error returned by <code>try_current</code> when no Runtime has been …","Runs a future to completion on this <code>Handle</code>’s associated …","Runs a future to completion on the Tokio runtime. This is …","","","","","","","","","","","Creates the configured <code>Runtime</code>.","","","Returns a <code>Handle</code> view over the currently running <code>Runtime</code>.","","Enables both I/O and time drivers.","Enables the I/O driver.","Enables the time driver.","Enters the runtime context. This allows you to construct …","Enters the runtime context.","","","","","","","","","","","","Returns a handle to the runtime’s spawner.","","","","","","Returns true if the call failed because there is currently …","Returns true if the call failed because the Tokio context …","Specifies the limit for additional threads spawned by the …","Creates a new runtime instance with default configuration …","Returns a new builder with the current thread scheduler …","Returns a new builder with the multi thread scheduler …","Executes function <code>f</code> just before a thread is parked (goes …","Executes function <code>f</code> after each thread is started but …","Executes function <code>f</code> before each thread stops.","Executes function <code>f</code> just after a thread unparks (starts …","Shuts down the runtime, without waiting for any spawned …","Shuts down the runtime, waiting for at most <code>duration</code> for …","Spawns a future onto the Tokio runtime.","Spawns a future onto the Tokio runtime.","Runs the provided function on an executor dedicated to …","Runs the provided function on an executor dedicated to …","Sets a custom timeout for a thread in the blocking pool.","Sets name of threads spawned by the <code>Runtime</code>’s thread …","Sets a function used to generate the name of threads …","Sets the stack size (in bytes) for worker threads.","","","Returns a Handle view over the currently running Runtime","","","","","","","","","","","","","","","","Sets the number of worker threads the <code>Runtime</code> will use."],"i":[0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,3,3,0,0,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,0,4,6,3,7,0,0,8,9,8,9,9,9,8,8,9,8,9,0,9,0,9,9,0,9,8,9,8,9,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,10,13,14,11,12,10,13,14,11,12,10,10,10,11,12,12,12,10,11,12,10,13,14,14,11,12,10,13,14,11,11,12,10,13,14,11,14,14,12,11,12,12,12,12,12,12,11,11,10,11,10,11,12,12,12,12,10,14,10,12,10,13,14,11,12,10,13,14,11,12,10,13,14,11,12],"f":[null,null,[[]],[[]],[[],["tasklocals",3]],[[]],[[["python",3]],["pyany",3]],[[["python",3]],["pyresult",6]],null,[[["python",3]],["pyany",3]],[[["formatter",3]],["result",6]],[[]],null,[[["python",3]],["pyresult",6,[["pyany",3]]]],[[]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["pyany",3]]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["pyany",3]]],[[["python",3]],["pyresult",6]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],[[["python",3]],["pyresult",6,[["tasklocals",3]]]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],null,null,[[["python",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3]]],[[["tasklocals",3]]],null,[[],["joinhandle",3]],null,[[]],[[],["pyany",3]],[[]],[[]],[[],["pyany",3]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[["python",3]],["option",4]],[[["python",3]],["option",4]],[[]],[[],["pyerr",3]],[[],["option",4,[["error",8]]]],[[["python",3]],["pyobject",6]],[[],["string",3]],[[],["result",4,[["pydowncasterror",3]]]],[[],["result",4]],[[],["result",4,[["pydowncasterror",3]]]],[[]],[[],["result",4]],[[],["typeid",3]],[[["python",3]],["pytype",3]],[[["python",3]]],null,null,null,null,null,null,null,[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],[[["python",3]],["pyresult",6,[["tasklocals",3]]]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[],["option",4,[["tasklocals",3]]]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[],["bool",15]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],[[["python",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["tasklocals",3]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["test",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["args",3]],[[],["pin",3,[["box",3,[["future",8]]]]]],null,[[["vec",3,[["test",3]]],["args",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],[[["python",3]],["pyresult",6,[["tasklocals",3]]]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[],["runtime",3]],[[["builder",3]]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["tasklocals",3],["pyany",3]],["pyresult",6]],[[["python",3]],["pyresult",6,[["pyany",3]]]],[[["python",3],["tasklocals",3]],["pyresult",6,[["pyany",3]]]],null,null,[[["python",3]],["pyresult",6]],[[["pyany",3]],["pyresult",6]],[[["tasklocals",3]]],[[["tasklocals",3]]],null,[[],["pending",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["runtime",3],["error",3]]]],[[],["handle",3]],[[]],[[],["handle",3]],[[]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["enterguard",3]],[[],["enterguard",3]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["handle",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["builder",3]],[[],["result",4,[["runtime",3],["error",3]]]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[]],[[["duration",3]]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[["duration",3]],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[["usize",15]],["builder",3]],[[]],[[],["string",3]],[[],["result",4,[["handle",3],["trycurrenterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["builder",3]]],"p":[[3,"TaskLocals"],[3,"RustPanic"],[8,"Runtime"],[8,"ContextExt"],[8,"JoinError"],[8,"LocalContextExt"],[8,"SpawnLocalExt"],[3,"Args"],[3,"Test"],[3,"Handle"],[3,"Runtime"],[3,"Builder"],[3,"EnterGuard"],[3,"TryCurrentError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};